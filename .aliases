# Common Alias defenition file.
# Designed so it can be shared among different computers and shells
#
# Author: David Terei

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
	export LSCOLORS="Gxfxcxdxbxegedabagacad"
	if command -v dircolors &>/dev/null; then
		eval "`dircolors -b`" &>/dev/null
	fi

	# try to accomodate for different ls
	if ls --color -d . &>/dev/null 2>&1; then
		alias ls='ls --color=auto'
	elif colorls -G . &>/dev/null 2>&1; then
		alias ls='colorls -G'
	elif ls -G . &>/dev/null 2>&1; then
		alias ls='ls -G'
	fi
fi

# have xclip use gtk clipboard
alias xclip='xclip -sel clip'

# turn on some good! regular expression by default
if echo "a" | sed -r "s/a//" &>/dev/null; then
	alias sed='sed -r'
elif echo "a" | sed -E "s/a//" &>/dev/null; then
	alias sed='sed -E'
fi

alias grep='grep -E'

# create alias thats kind of like wget using curl if wget isn't present
if command -v wget &>/dev/null; then
	echo h > /dev/null
else
	if command -v curl &>/dev/null; then
		function wget() {
			file=`echo $1 | sed -e 's/.*\///'`
			curl -X GET $1 > $file
		}
	fi
fi

alias delay=sleep

# reload profile
alias rlp='source ~/.profile'

# some more ls aliases
alias dir='ls --format=vertical'
alias vdir='ls --format=long'
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'
alias less='less -R'

# cd aliases
alias cd..='cd ..'
alias .='pwd'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'

# Push and pop directories on directory stack
alias pu='pushd'
alias po='popd'
alias d='dirs -v'

#make,remove dir
alias md='mkdir -p'
alias rd=rmdir
function take() {
  mkdir -p $1
  cd $1
}

# Super user
alias _='sudo'
alias ss='sudo su -'
alias _g='gksu'

# vim
alias v='vim'

# Aptitude
alias ap='sudo aptitude'
alias api='sudo aptitude install'
alias apu='sudo aptitude update'
alias apg='sudo aptitude full-upgrade'
alias apz='sudo aptitude search'
alias apc='sudo aptitude changelog'
alias aps='sudo aptitude show'

# sync all my Settings
alias sync_all='pushd ~/Settings && git pull && git push && pushd ~/Vim && git pull && git push && pushd ~/Scraps && git pull && git push && popd && popd && popd'
alias check_all='pushd ~/Settings && echo "Settings" && gz && pushd ~/Vim && echo "Vim" && gz && pushd ~/Scraps && echo "Scraps" && gz && popd && popd && popd'

# Git
alias g='git'
alias gg='git log'
alias ggp='git log -p'
alias gcount='git shortlog -sn'
alias gz='git status -s'
alias gd='git diff | less'
alias gl='git pull'
alias gup='git pull --rebase'
alias gc='git commit -v'
alias gca='git commit -v -a -m'
alias ge='git rebase'
alias gb='git branch'
alias go='git checkout'
alias ga='git add'
alias gf='git fetch'
alias gfa='git fetch --all'
alias gr='git remote'
alias grv='git remote -v'

# Github
function hub () {
	if [[ $1 == "clone" && $2 != "" ]]; then
		git clone "git@github.com:dterei/$2.git" $3
	elif [[ $1 == "repos" ]]; then
		curl -s http://github.com/api/v2/json/repos/show/dterei | python -mjson.tool | grep name
	elif [[ $1 == "list" ]]; then
		curl -s http://github.com/api/v2/json/repos/show/dterei | python -mjson.tool
	elif [[ $1 == "" || $1 == "-h" || $1 == "--help" ]]; then
		echo "Usage: \tclone <repo>\t -- Clones the repository \
				\n\trepos\t\t -- List my repositories \
				\n\tlist\t\t -- List (detailed) information on all my repositories"
	fi
}

#json pretty print
alias jsonp='python -mjson.tool'

#simple web server at current director
alias www='python -m SimpleHTTPServer'

#screen alias
alias s='screen'
alias x='exit'


# =======================
# GHC Development aliases
# =======================

alias ghcf='ghc -fforce-recomp'
alias hc='ghc --make -O2 -fforce-recomp'

alias dghc='$GHCDEVBIN'
alias dghc1='$GHCDEV/ghc-stage1'

alias dghcc='$GHCDEVBIN -fllvm -fforce-recomp -fglasgow-exts -keep-tmp-files'
alias dghcc1='$GHCDEV/ghc-stage1 -fllvm -fforce-recomp -fglasgow-exts -keep-tmp-files'

alias dghcf='$GHCDEVBIN -fforce-recomp'
alias dghcf1='$GHCDEV/ghc-stage1 -fforce-recomp'

alias dghc-pkg='$GHCDEV/ghc-pkg'

function hsclean() {
	find $TMPDIR/ghc* -user `whoami` -delete
	rm $GHCHOME/*.hi
	rm $GHCHOME/*.o
	find $GHCHOME/ -maxdepth 1 -executable -type f -delete
}

alias rmhs='rm *(*); rm *.o; rm *.hi'
alias rmhss='rm *(*); rm *.o; rm *.hi; rm *.s; rm *.ll; rm *.bc'

alias dcabal='cabal install --with-ghc=$GHCDEVBIN --with-ghc-pkg=$GHCDEVPKG'

alias dghc_config='runhaskell Setup configure --with-ghc=$GHCDEVBIN --with-ghc-pkg=$GHCDEVPKG'
alias dghc_build='runhaskell Setup build'
alias dghc_reg='runhaskell Setup register --inplace'
alias dghc_pkg='dghc_config && dghc_build && dghc_reg'

# validate help
function ghcval() {
	if [[ -e './validate' ]]; then
		if [[ -x './validate' ]]; then
			N=12
			FILE="valium"
			if [[ -n "$1" ]]; then
				N=$1
			fi
			if [[ -n "$2" ]]; then
				FILE=$2
			fi
			echo "Running validate with $N threads."
			echo "Saving log to file $FILE."
			echo ""
			echo "============================================================"
			THREADS=$N ./validate 2>&1 | tee $FILE
			echo "============================================================"
			echo "Validate ran successfully with $N threads."
			echo "Log saved to file $FILE"
			echo ""
		else
			echo "Error: The './validate' script isn't executable!"
		fi
	else
		echo "Error: The './validate' script doesn't exist"
		echo "       You don't seem to be in a GHC build tree!"
	fi
}

# make parallel aliases
alias make0='make -j16'
alias make1='make -j1'
alias make2='make -j2'
alias make3='make -j3'
alias make4='make -j4'
alias make5='make -j5'
alias make6='make -j6'
alias make7='make -j7'
alias make8='make -j8'
alias make9='make -j9'
alias make10='make -j10'
alias make11='make -j11'
alias make12='make -j12'
alias make13='make -j13'
alias make14='make -j14'
alias make15='make -j15'
alias make16='make -j16'
alias make17='make -j17'
alias make18='make -j18'
alias make19='make -j19'
alias make20='make -j20'


#!/usr/bin/env bash

GVM_HOME=$HOME/.gvm
GVM_CURRENT_FILE=${GVM_HOME}/ghc-current
GVM_PATHS_FILE=${GVM_HOME}/ghc-paths

GHC_DEFAULT_VERSION=system
# we don't really need this, the config file could handle but value of having
# it built in so a no-config file setup works...
GHC_EXTERNAL=(system,/usr/bin)

get_ghc_versions() {
	local ghc_dirs=$( cat ${GVM_PATHS_FILE} | grep "^dir:" | sed "s/^dir://")
	local ghcp=()

	for p in ${ghc_dirs[@]}
	do 
		if [ -d ${p} ]; then
			pushd ${p} > /dev/null
			for x in `ls */bin/ghc | sed "s/\/.*//"`
			do
				# store as tuple of (description, path)
				ghcp+=(${x},${p}/${x}/bin)
			done
			popd > /dev/null
		else
			echo "WARN: Non-existent directory present in config file"
			echo "    => ${p}"
		fi
	done

	local ghc_ind=$( cat ${GVM_PATHS_FILE} | grep "^ghc:" | sed "s/^ghc://")
	local ghci=()

	for p in ${ghc_ind[@]}
	do
		IFS=","; set $p # (name,path)
		if [ -x ${2}/ghc ]; then
			ghci+=("${1},${2}")
		fi
	done

	unset IFS

	GHC_VERSIONS=( ${GHC_EXTERNAL} ${ghcp[@]} ${ghci[@]} )
}

get_ghc_version() {
	if [ -n "${GVM}" ]; then
		GHC_VERSION=${GVM}
	elif [ -z "${GHC_VERSION}" ]; then
		GHC_VERSION=${GHC_DEFAULT_VERSION}
		GHC_VERSION=`cat ${GVM_CURRENT_FILE} | head -1`
	fi
}

list_ghc_versions() {
	get_ghc_versions
	get_ghc_version
	echo "GHC Versions:"
	echo
	for v in ${GHC_VERSIONS[@]}
	do
		IFS=","; set $v # (name,path)
		local arch=$( run_ghc_version ${2} ghc '--info' | grep "Target platform" | cut -d, -f3 | sed "s/[\"\)]//g")
		local vers=$( run_ghc_version ${2} ghc '--info' | grep "Project version" | cut -d, -f3 | sed "s/[\"\)]//g")
		if [ -n "${vers}" ]; then
			if [ "${GHC_VERSION}" = "${1}" ]; then
				printf "=> %-12s %-18s %s\n" ${1} "[${vers}]" "[${arch}]"
			else
				printf "   %-12s %-18s %s\n" ${1} "[${vers}]" "[${arch}]"
			fi
		fi
	done
	unset IFS
	echo
}

get_ghc_path() {
	get_ghc_versions
	get_ghc_version
	for v in ${GHC_VERSIONS[@]}
	do
		IFS=","; set $v # (name,path)
		if [ "${GHC_VERSION}" = "${1}" ]; then
			GHC_PATH=${2}
			unset IFS
			return
		fi
	done
	unset IFS
}

set_ghc_version() {
	get_ghc_versions
	ver=$1
	nov=1
	for v in ${GHC_VERSIONS[@]}
	do
		IFS=","; set $v # (name,path)
		if [ "${ver}" = "${1}" ]; then
			nov=0
		elif [ "ghc-${ver}" = "${1}" ]; then
			nov=0
			ver=${1}
		elif [ "${ver}" = "ghc-${v}" ]; then
			nov=0
			ver=${1}
		fi
	done
	if [ "${nov}" = "1" ]; then
		echo "ERROR: Not  aware of such a GHC version: ${ver}"
	else
		echo "${ver}" > ${GVM_CURRENT_FILE}
		echo "Using ${ver}"
	fi
}

run_ghc_program() {
	get_ghc_path
	run_ghc_version ${GHC_PATH} $@
}

run_ghc_version() {
	local where=$1
	local prog=$2
	shift 2
	local args=$@
	
	if [ -x "${where}/${prog}" ]; then
		${where}/${prog} ${args} ${GVM_OPTS}
	else
		echo "${where} is not present on this machine..."
	fi
}

list_paths() {
	cat ${GVM_PATHS_FILE} | sed 's/\([^,]*\):/    \1:    /'
}

add_ghc() {
	local path=`cd "${1}"; pwd`
	echo "ghc:${path}" >> ${GVM_PATHS_FILE}
}

add_ghc_dir() {
	local path=`cd "${2}"; pwd`
	echo "dir:${1},${path}" >> ${GVM_PATHS_FILE}
}

